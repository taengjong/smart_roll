# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
*.xcscmblueprint
*.xccheckout

## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)
build/
DerivedData/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

## Obj-C/Swift specific
*.hmap

## App packaging
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
# *.xcodeproj
#
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
.swiftpm/

.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# Accio dependency management
Dependencies/
.accio/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

# macOS
.DS_Store

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# Temporary files
*.tmp
*.temp

# Log files
*.log

# Backup files
*.backup
*.bak

# Core Data
*.sqlite
*.sqlite-wal
*.sqlite-shm

# OS generated files
Thumbs.db

# Xcode 
*.xcuserstate
*.xcuserdatad

# Simulator
*.app

# ==========================================
# Web Project (Next.js) Ignores
# ==========================================

# Dependencies
web/node_modules/
web/.pnp
web/.pnp.js

# Production builds  
web/.next/
web/out/
web/build/
web/dist/

# Environment variables
web/.env
web/.env.local
web/.env.development.local
web/.env.test.local
web/.env.production.local

# Logs
web/npm-debug.log*
web/yarn-debug.log*
web/yarn-error.log*
web/lerna-debug.log*

# Runtime data
web/pids
web/*.pid
web/*.seed
web/*.pid.lock

# Coverage directory used by tools like istanbul
web/coverage/
web/*.lcov

# nyc test coverage
web/.nyc_output

# ESLint cache
web/.eslintcache

# Optional npm cache directory
web/.npm

# Optional eslint cache
web/.eslintcache

# Microbundle cache
web/.rpt2_cache/
web/.rts2_cache_cjs/
web/.rts2_cache_es/
web/.rts2_cache_umd/

# Optional REPL history
web/.node_repl_history

# Output of 'npm pack'
web/*.tgz

# Yarn Integrity file
web/.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
web/.cache
web/.parcel-cache

# Stores VSCode versions used for testing VSCode extensions
web/.vscode-test

# Storybook build outputs
web/.out
web/.storybook-out

# Temporary folders
web/tmp/
web/temp/

# TypeScript cache
web/*.tsbuildinfo

# Vercel
web/.vercel

# PWA files
web/sw.js
web/sw.js.map
web/workbox-*.js
web/workbox-*.js.map

# Next.js build output
web/.next/

# Nuxt.js build / generate output
web/.nuxt
web/dist

# Gatsby files
web/.cache/
web/public

# Turbo
web/.turbo